siat 허효선

2020.03.30 java 요약정리

  java 는 객체지향 언어다.
	- 장점: 재사용성, 유지보수 & 확장성
	 => 유지보수 시간과 비용 절감
	- 자바 소스 구성 요소 : *.java, 패키지, import, 클래스, 변수, 생성자, 생성자

* 변수 : 데이터
	1. 변수명 : 데이터 구분 이름
	2. 변수 타입 : 데이터 타입
	3. 문자열 표현 : 타입 = String, 값 표현 " "
	4. 정수 표현 : int, 값 표현 정수

	ex) 변수 선언 및 값 초기화
	String name = "허효선";
	int age = 25;

* 멤버 변수
	1. class{} 내부 선언
	2. 객체 생성 시 , 실제 메모리에 사용가능하게 생성
	3. 생성되는 객체마다 서로 다른 메모리 생성
	4. String 타입, int 타입의 각 기본 디폴트값 null , 0
     ( String > int => String )

* 로컬 변수
	1. 선언 위치 : 메소드 or 생성자 내 () 또는 {}
	2. 선언 시 값을 초기화 하지 않으면, 멤버 변수와 달리 자동초기화 진행 불가
	3. 메소드나 생성자를 호출 시에만 자동 생성
    - 해결방법: 로컬 변수 사용 전에 반드시 초기화
  4. 메소드 종료시 자동 삭제
    => 멤버변수, 지역변수를 언제쓰는게 적합한지 명확하게 구분 할 줄 알아야함!

* class
	1. 객체를 만들어내기 위한 틀
	2. 연관 되어있는 변수, 메소드의 집합
  3. class명은 첫 대문자로 시작

* 생성자 : 객체 생성할 수 있게 하는 요소 ( 객체 생성 필수 요소 )
	1. 멤버 변수의 초기화 담당
	2. 클래스 내 생성자가 단 한 개도 존재하지 않을 경우, 자동 생성
	3. 선언 방식은 클래스 이름과 동일
  4. 멤버 변수의 초기화 담당

  @@	클래스명 변수명 = new 클래스명();     ( 반드시 클래스와 이름이같아야함 )

 * 메소드 : 동사적인 기능 ( 수학적, 알고리즘적 )
 	- parameter :기능을 수행할 때 필요한 인풋 값
      => parameter가 있을 경우, 메소드 호출 시 해당 값 입력 ( 없을 수도 있음 ! )
	- return value : 결과 아웃풋 값
      => 리턴 타입 지정해줘야함

	1. 데이터 : 변수로 표현
	2. 객체 생성시 : 생성자 호출
	3. 연산, 유효성 검증, 데이터 가공등 기능을 구현 : 메소드
	4. 메소드 구현 문법
		- 예 : 두 개의 숫자로 + 또는 - 등 다양한 연산
		- 이 메소드 기능은 연산 후 결과값 return 으로 반환

	5. 메소드 호출 문법
  	  - 구현 문법
  		리턴 타입 메소드명 (parameter 또는 [argument]){
  		로직
  		[return 값];   // 메소드 결과값을 메소드 호출한 곳으로 돌려줌
		}

    * 결합연산자 : 다양한 데이터값을 마치 하나인 것처럼 활용


    * 객체란?
    - 속성과 행위로 구성
    변수: 객체의 고유한 데이터, 특징 ( Attribute )
    메소드: 객체의 고유한 동작, 행위, 기능 ( Behavior )


  1. Instance : 객체 생성 과정으로 만들어진 실제 메모리에 사용 가능하게 생성된 대상
  2. 하나의 클래스로부터 다수의 객체 생성 가능

  객체 지향 언어의 장점
  1. 장점 :
   - 기업 관점 : 비용 절감
   - 개발자 관점 : 개발 및 유지보수가 쉽다
   - 재사용성, 유지보수 & 확장성

  2. 객체지향언어 : 자바 , ruby , c# 등

  3. 자바 플랫폼 두가지 구성 요소
      * 플랫폼이란 ? 프로그램이 실행되는 하드웨어나 소프트웨어 환경
        - 자바 플랫폼 구성 : os + jdk (os 에 맞게 설치 ) -> 개발
   (1) 자바 가상머신 ( 즉 os 에 맞게 설치되어야 자바 언어 모두 다 실행가능 )
   - mac 에서 개발한 코드를 windo에서도 실행 가능하게 해주는 핵심 기능
   (2) API (자바 어플리케이션 인터페이스)
